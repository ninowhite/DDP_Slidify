complete<- function(directory, id = 1:332) {
ids <- c()
nobs <- c()
for(i in id) {
paste(i, "csv", sep="")
if(i < 10) {
y <- paste(directory,"/00",i, ".csv", sep="")
}
if(i > 9 & i<=99 ) {
y <- paste(directory,"/0",i,".csv",sep="")
}
if(i > 99) {
y <- paste(directory,"/",i, ".csv", sep="")
}
x <- read.csv(y)
x <- sum(complete.cases(x))
ids <- c(ids,i)
nobs <- c(nobs,x)
}
return(data.frame(id = ids,nobs ))
}
testName <- "this is a test"
sub("_", "", testName)
testName <- "THIS_IS_A_TEST"
SUB("_", "", testName)
sub("_", "", testName)
tolower(testName)
gsub("_", "", testData)
gsub("_", "", testName)
install.packages("stringr")
library(stringr)
nchar("Jeffrey Leek")
date()
sys.date()
sys.Date()
Sys.Date()
library(datasets)
data <- library(datasets)
head(data)
data
x <- rnorm(100)
hist(x)
y <- rnorm(100)
plot(x,y)
plot(x,y, pch = 19)
plot(x,y, pch = 5)
plot(x,y, pch = 7)
data[, 5]
dim(data)
class(data)
names(dara)
names(data)
str(data)
install.packages("ggplot2")
library(ggplot2)
str(mpg)
head(mpg)
?qplot
?geom
?qplot
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
str(nlme)
head(nlme)
?xyplot
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
rint(p)
print(p)
head(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library("ggplot2", lib.loc="C:/Users/nwhite/Documents/R/win-library/3.1")
library("ggplot2", lib.loc="C:/Users/nwhite/Documents/R/win-library/3.1")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(movies)
data(movies)
head(movies)
qplot(votes, rating, data = movies), geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
?qplot
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + stat_smooth("loess")
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(1,2,5,4,7,4,8,9,5,8,2,12), sd = 0.2)
plot(x,y, col = "blue", pch = 2, cex = 2)
text(x + 0.05, y + 0.05, labels = as.characters(1:12))
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(1,2,5,4,7,4,8,9,5,8,2,12), sd = 0.2)
plot(x,y, col = "blue", pch = 2, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x,y)
kmenasObj <- kmeans(dataFrame, centers = 4)
names(kmeansObj)
kmeansObj
kmeansObj <- kmeans(dataFrame, centers = 4)
names(kmeansObj)
kmeansObj$cluster
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(100, mean = rep(1:5, each = 20), sd = 0.2)
y <- rnorm(100, mean = rep(1,2,5,4,7,4,8,9,5,8,2, each = 10) , sd = 0.2)
plot(x,y, col = "blue", pch = 2, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x,y)
kmeansObj <- kmeans(dataFrame, centers = 4)
plot(x, y, col = kmeansObj$cluster, pch = 5, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 2)
kmeans$centers
kmeansObj$centers
kmeansObj$cluser
kmeansObj$cluster
y
x
install.pakages("knitr")
install.packages("knitr")
library(knitr)
getwd()
x <- 100
y <- 50
getOption("rpubs.uplod.method")
options()
options(rpubs.upload.method = "internal")
$rpubs.upload.method
getOption("rpubs.upload.method")
.15 * .09
1/1.5
.5/(1 + .5)
1/6
(1/6)+(1/6)+(1/6)+(1/6)+(1/6)+(1/6)
p <- c(.1, .2, .3, .4)
x <- 2:5
sqrt(2)
y <- (sqrt(2)*.1) + (sqrt(3)*.2) + (sqrt(4)*.3) + (sqrt(5)*.4)
y
.12 + .11 - .06
.12 -.06
x <- 1
x <- 1:4
1/sum(x)
sum(x)
r <- (1*(1/sum(x))) + (2*(2/sum(x))) + (3*(3/sum(x))) + (4*(4/sum(x)))
r
.75/(1-.52)
4/7
(.75*.30)/((.75*.30)+(.25*.70))
(.75*.30)/((.75*.30)+(.52*.48))
(.08-.07)/.02
pnorm(93, mean = 100, sd = 10)
qnorm(.95, mean = 100, sd = 10)
pnorm(50, mean = 100, sd = 10)
choose(5, .05)
choose(6, 5)*.5^6
pbinom(4, prob = .5, size = 5)
pbinom(4, prob = .5, size = 5, lower.tail = FALSE)
round(pnorm(1000, mean = .5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE)
pnorm(1000, mean = .5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE)
pnorm(1000, mean = .5, sd = sqrt((1 / 12) / 100), lower.tail = FALSE)
pnorm(100, mean = .5, sd = sqrt((1 / 12) / 100), lower.tail = FALSE)
rnorm(100, mean = .5, sd = sqrt((1 / 12) / 100), lower.tail = FALSE)
rnorm(100, mean = .5, sd = sqrt((1 / 12) / 1000)
rnorm(100, mean = .5, sd = sqrt((1 / 12) / 1000))
x <- rnorm(100, mean = .5, sd = sqrt((1 / 12) / 1000))
sd(x)
x <- rnorm(1000, mean = .5, sd = sqrt((1 / 12) / 100))
sd(x)
x <- rnorm(1000, mean = .5, sd = sqrt((1 / 12) / 1000))
sd(x)
x <- c(.18, -1.54, .42, .95)
w <- c(2, 1, 3, 1)
xm <- mean(x)
xm
ls <- (2*(.18 - xm)^2) + (1*(-1.54 - xm)^2) + (3*(.42 - xm)^2) + (1*(.95 - xm)^2)
ls
xm <- .18
ls <- (2*(.18 - xm)^2) + (1*(-1.54 - xm)^2) + (3*(.42 - xm)^2) + (1*(.95 - xm)^2)
ls
xm <- .18
(2*(.18 - xm)^2) + (1*(-1.54 - xm)^2) + (3*(.42 - xm)^2) + (1*(.95 - xm)^2)
xm <- -1.54
(2*(.18 - xm)^2) + (1*(-1.54 - xm)^2) + (3*(.42 - xm)^2) + (1*(.95 - xm)^2)
xm <- -1.54
(2*(.18 - xm)^2) + (1*(-1.54 - xm)^2) + (3*(.42 - xm)^2) + (1*(.95 - xm)^2)
xm <- .42
(2*(.18 - xm)^2) + (1*(-1.54 - xm)^2) + (3*(.42 - xm)^2) + (1*(.95 - xm)^2)
xm <- .95
(2*(.18 - xm)^2) + (1*(-1.54 - xm)^2) + (3*(.42 - xm)^2) + (1*(.95 - xm)^2)
xm <- .1471
(2*(.18 - xm)^2) + (1*(-1.54 - xm)^2) + (3*(.42 - xm)^2) + (1*(.95 - xm)^2)
xm <- .0025
(2*(.18 - xm)^2) + (1*(-1.54 - xm)^2) + (3*(.42 - xm)^2) + (1*(.95 - xm)^2)
xm <- 1.077
(2*(.18 - xm)^2) + (1*(-1.54 - xm)^2) + (3*(.42 - xm)^2) + (1*(.95 - xm)^2)
xm <- .3
(2*(.18 - xm)^2) + (1*(-1.54 - xm)^2) + (3*(.42 - xm)^2) + (1*(.95 - xm)^2)
xm <- c(1,3,2,3)
(2*(.18 - xm)^2) + (1*(-1.54 - xm)^2) + (3*(.42 - xm)^2) + (1*(.95 - xm)^2)
data(mtcars)
lm(I(mpg - mean(mpg)) ~ I(wt - mean(wt)) - 1, data = mtcars)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
(8.58 - 0)/sqrt(1)
(8.58 - 1)/sqrt(1)
data(mtcars)
wt.lm <- lm(mpg ~ wt, data = mtcars)
newdata = data.frame(wt = 3.21725)
predict(wt.lm, newdata, interval = "confidence")
data(mtcars)
wt.lm <- lm(mpg ~ wt, data = mtcars)
newdata = data.frame(wt = 3)
predict(wt.lm, newdata, interval = "predict")
data(mtcars)
wt.lm <- lm(mpg ~ wt, data = mtcars)
newdata = data.frame(wt = 3)
predict(wt.lm, newdata, interval = "predict")
data(mtcars)
wt.lm <- lm(mpg ~ wt, data = mtcars)
newdata = data.frame(wt = 3.21725)
predict(wt.lm, newdata, interval = "confidence")
t.lm <- lm(mpg ~ wt, data = mtcars)
newdata = data.frame(wt = 3)
predict(wt.lm, newdata, interval = "predict")
library(swirl)
install.packages("swirl")
install_from_swirl("Regression Models")
library("swirl", lib.loc="C:/Users/nwhite/Documents/R/win-library/3.1")
install_from_swirl("Regression Models")
swirl()
fit <- lm(child ~ parent, galton)
sumary(fit)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
fit$coef[1]
ols <- fit$coef[1]
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
rhs - lhs
lhs - rhs
all.equal(lhs, rhs)
varchild <- cov()
varchild <- cov(galton$child)
varchild <- var(galton$child)
varchild <- var(galton$child)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(c(ols.slope, ols.ic))
varEst <- var(ols.slope, ols.ic))
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, varRes, varEst)
all.equal(varChild, varRes + varEst)
efit <- lm(acel ~ mag + dist, attenu)
efit <- lm(accel ~ mag + dist, attenu)
mean(efit)
mean(efit$residuals)
cov(attenu$mag)
cov(efit$residuals)
cov(efit$residuals, attenu$map)
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor, gch_nor)
l_nor <- lm(galton$child, galton$parent)
l_nor <- lm(galton$child ~ galton$parent)
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(child ~ parent, data = galton)
fit <- lm(child ~ parent, galton)
sqrt(1/n-2)
sqrt(sum(fit$residuals^2) / (n -2))
summary(fit)$sigma
deviance(fit)/(n-2)
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
stot <- sum(galton$child^2 - mu)
stot <- sum((galton$child - mu)^2)
sTot <- sum((galton$child - mu)^2)
sRes <- deviance((stot) - (n-2))
sRes <- deviance(stot - (n - 2))
sRes <- deviance(sum(stot)
sRes <- deviance(sum(stot))
deviance(sum(stot))
sRes <- deviance(fit
sRes <- deviance(fit)
1 - (sRes/sTot)
1 - sRes/sTot
summary(fit)
summary(fit)$r.squared
cor((galton$child, galton$parent)^2)
cor((galton$child ~ galton$parent)^2)
cor(galton$child ~ galton$parent)
cor(galton$child,galton$parent)
cor(galton$parent, galton$child)^2
ones <- rep(1, nrow(galton))
lm(child, parent - 1, galton)
lm(child ~ ones + parent -1, galton)
lm(child ~ ones + parent, galton)
lm(child ~ parent - 1)
lm(child ~ parent - 1, galton)
lm(child - 1, galton)
lm(child ~ 1, galton)
head(trees)
fit <- lm(Volume ~ Girth + Height + Constant - 1, trees)
trees2 <- lm(Volume ~ Girth - 1 + Height + Constant - 1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant - 1, trees)
fit2 <- lm(Volume ~ Height + Constant - 1, trees2)
lapply(list(fit, fit2), coef)
<- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
plot(x, y)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
plot(x,y)
fit <- lm(y ~ x)
round(hatvalues(fit)[1:10], 3)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
round(dfbetas(fit)[1:10], 3)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit <- lm(y ~ x)
round(dfbetas(fit)[1:10, 2], 3)
round(dfbetas(fit))
?I()
data(mtcars)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
data(mtcars)
automatic <- subset(mtcars, mtcars$am == 0)
manual <- subset(mtcars, mtcars$am == 1)
meanmpgauto <- mean(automatic$mpg)
meanmpgman <- mean(manual$mpg)
automatic
autosummary <- summary(lm(mpg ~ ., data = automatic))
autosummary
mansumary <- ummary(lm(mpg ~ ., data = manual))
mansumary <- summary(lm(mpg ~ ., data = manual))
mansummary
mansummary
mansummary <- summary(lm(mpg ~ ., data = manual))
mansummary
meansummary$coefficients
meansummary <- summary(lm(mpg ~ ., data = manual))
meansummary
meansummary$coefficients
autosummary <- summary(lm(mpg ~ ., data = automatic)$coefficients)
meansummary <- summary(lm(mpg ~ ., data = manual)$coefficients)
plot(mtcars$mpg, mtcars$am)
str(mtcars)
hist(mtcars$mpg)
qplot(mpg, am, data = mtcars)
library("ggplot2", lib.loc="C:/Users/nwhite/Documents/R/win-library/3.1")
qplot(mpg, am, data = mtcars)
boxplot(mtcars$mpg, col = mtcars$am)
boxplot(mtcars$mpg, col = "green")
barplot(table(mtcars$mpg), col = "red")
automatic <- subset(mtcars, mtcars$am == 0)
manual <- subset(mtcars, mtcars$am == 1)
mean(automatic$mpg)
mean(manual$mpg)
## predict mpg using no interactions all variable are predictors; holding variable constant
summary(lm(mpg ~ ., data = automatic))$coefficients
summary(lm(mpg ~ ., data = manual))$coefficients
##Automatic Transmission graphs
par(mfrow = c(1,3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(automatic$wt, automatic$mpg)
model <- lm(automatic$mpg ~ automatic$wt)
abline(model, lwd = 2)
plot(automatic$hp, automatic$mpg)
model1 <- lm(automatic$mpg ~ automatic$hp)
abline(model1, lwd = 2)
boxplot(automatic$mpg ~ automatic$cyl)
mtext("Automatic Transmission Exploratory Analysis", outer = TRUE)
##Manual Transmission graphs
par(mfrow = c(1,3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(manual$wt, manual$mpg)
model3 <- lm(manual$mpg ~ manual$wt)
abline(model3, lwd = 2)
plot(manual$hp, manual$mpg)
model4 <- lm(manual$mpg ~ manual$hp)
abline(model4, lwd = 2)
boxplot(manual$mpg ~ manual$cyl)
mtext("Manual Transmission Exploratory Analysis", outer = TRUE)
## running marginal estimate disregarding other coefficeints
autosummarympggear <- summary(lm(automatic$mpg ~ automatic$gear))$coefficients
mansummarympggear <- summary(lm(manual$mpg ~ manual$gear))$coefficients
summary(lm(automatic$mpg ~ automatic$gear))$coefficients
summary(lm(manual$mpg ~ manual$gear))$coefficients
## Exploring correlation of mpg and gear
cor(manual$mpg, manual$gear)
cor(automatic$mpg, automatic$gear)
## Exploring other correlations
cor(manual$mpg, manual$cyl + manual$disp + manual$hp + manual$wt)
cor(automatic$mpg, automatic$cyl + automatic$disp + automatic$hp + automatic$wt)
## Weight Confidence Interval Test
wt.lm <- lm(mpg ~ wt, data = automatic)
autonewdata = data.frame(wt = c(2,3,4,5,6))
predict(wt.lm, autonewdata, interval = "confidence")
wt.lm1 <- lm(mpg ~ wt, data = manual)
mannewdata = data.frame(wt = c(2,3,4,5,6))
predict(wt.lm1, mannewdata, interval = "confidence")
## Horsepower Prediction Test
hp.lm <- lm(mpg ~ hp, data = automatic)
autonewdata1 = data.frame(hp = c(150, 200, 250, 300, 400, 450))
predict(hp.lm, autonewdata1, interval = "predict")
hp.lm1 <- lm(mpg ~ hp, data = manual)
autonewdata1 = data.frame(hp = c(150, 200, 250, 300, 400, 450))
predict(hp.lm1, autonewdata1, interval = "predict")
par(mfrow = c(1,3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(automatic$wt, automatic$mpg)
model <- lm(automatic$mpg ~ automatic$wt)
abline(model, lwd = 2)
plot(automatic$hp, automatic$mpg)
model1 <- lm(automatic$mpg ~ automatic$hp)
abline(model1, lwd = 2)
boxplot(automatic$mpg ~ automatic$cyl)
mtext("Automatic Transmission Exploratory Analysis", outer = TRUE)
##Manual Transmission graphs
data(shuttle)
install.packages("MASS")
data(shuttle)
library(MASS)
data(shuttle)
head(shuttle)
str(shuttle)
shuttle[shuttle$use == "auto"] <- "1"
shuttle[shuttle == "auto"] <- "1"
shuttle$use <- as.numeric(shuttle$use)
str(shuttle)
data(shuttle)
shuttle$use <- as.character(shuttle$use)
str(shuttle)
shuttle[shuttle == "auto"] <- "1"
head(shuttle)
shuttle[shuttle == "noauto"] <- "0"
tail(shuttle)
unique(shuttle$use)
model <- glm(use ~ wind, data = shuttle, family = "binary")
model <- glm(use ~ wind, data = shuttle, family = "binomial")
shutt[shuttle == "head"] <- "1"
shuttle[shuttle == "head"] <- "1"
shutlle$wind <- as.character(shuttle$wind)
shuttle$wind <- as.character(shuttle$wind)
shuttle[shuttle == "head"] <- "1"
shuttle[shuttle == "tail"] <- "0"
model <- glm(use ~ wind, data = shuttle, family = "binomial")
shuttle$wind <- as.factor(shuttle$wind)
str(shuttle)
shuttle$use <- as.factor(shuttle$use)
str(shuttle)
model <- glm(use ~ wind, data = shuttle, family = "binomial")
install.packages("shiny")
install.packages("shinyapps")
library(shinyapps)
library(shinyapps)
library("shiny", lib.loc="C:/Users/nwhite/Documents/R/win-library/3.1")
R.Version()
R.Version
version
install.packages("shinyapps")
library(shinyapps)
R.Version()
install.packages("shinyapps")
library(shinyapps)
getqd()
getwd()
setwd("../Desktop/Shiny")
library("shiny")
library(devtools)
runApp()
runApp()
runApp()
runApp()
runApp()
devtols::install_github('rstudio/shinyapps')
devtools::install_github('rstudio/shinyapps')
library("shinyapps")
deployApp()
setwd("../Slidify")
library("slidify")
dir()
setwd("first_deck")
dir()
browseURL("index.html")
publish_github(ninowhite, slidify)
publish_github("ninowhite", "slidify")
publish_github("ninowhite", "DDP_Slidify")
publish_github("ninowhite", "DDP_Slidify")
